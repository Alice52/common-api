package common.redis.queue;

import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.connection.stream.RecordId;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.transaction.support.TransactionSynchronizationAdapter;
import org.springframework.transaction.support.TransactionSynchronizationManager;

import javax.annotation.Resource;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * @author zack <br>
 * @create 2022-05-23 09:43 <br>
 * @project project-cloud-custom <br>
 */
@Slf4j
// @Component
public class RedisProducer {
    @Resource private RedisTemplate redisTemplate;

    /**
     * 如果存在事务, 则在事务成功 commit 之后异步执行发送消息<br>
     * 如果不存在事务, 则异步执行发送消息
     *
     * @param streamKey
     * @param content
     */
    public void sendMessage(String streamKey, Map<String, Object> content) {
        if (TransactionSynchronizationManager.isSynchronizationActive()) {
            TransactionSynchronizationManager.registerSynchronization(
                    new TransactionSynchronizationAdapter() {
                        @Override
                        public void afterCommit() {
                            doSendMessageAsync(streamKey, content);
                        }
                    });
        } else {
            doSendMessageAsync(streamKey, content);
        }
    }

    private void doSendMessageAsync(String streamKey, Map<String, Object> content) {
        CompletableFuture.runAsync(() -> doSendMessage(streamKey, content))
                .exceptionally(
                        ex -> {
                            log.error("send message to {} failed.", streamKey, ex);
                            return null;
                        });
    }

    private void doSendMessage(String streamKey, Map<String, Object> content) {

        RecordId recordId = redisTemplate.opsForStream().add(streamKey, content);
        log.debug(
                "Producer sendMessage: isAutoGenerate={}, value={}, sequence={}, timestamp={}",
                recordId.shouldBeAutoGenerated(),
                recordId.getValue(),
                recordId.getSequence(),
                recordId.getTimestamp());
    }
}
