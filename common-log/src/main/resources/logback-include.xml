<included>
    <springProperty scope="context" name="app_name" source="spring.application.name" defaultValue=""/>
    <!-- https://blog.csdn.net/qiaodaima0/article/details/125504761
    <contextName>${app_name}</contextName>
    -->

    <!-- 格式化定义消息 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <conversionRule conversionWord="jsonMsg" converterClass="common.logging.converter.ParseObjectConverter"/>

    <!--  should be add in  logback-spring.xml by default.
        <conversionRule conversionWord="errorLevel"
                        converterClass="common.logging.converter.custom.DefaultErrorLevelConverter"/>
        <conversionRule conversionWord="errorType"
                        converterClass="common.logging.converter.custom.DefaultErrorTypeConverter"/>
    -->

    <springProperty scope="context" name="app_name" source="spring.application.name" defaultValue=""/>
    <property name="log.path" value="logs/${app_name}"/>

    <property name="console.pattern"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} [req-id: %X{req-id} traceId: %X{X-B3-TraceId}, spanId: %X{X-B3-SpanId}, parent: %X{X-B3-ParentSpanId:-}] [error_level:%errorLevel] [error_type: %errorType]  %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %jsonMsg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="file.pattern"
              value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} [req-id: %X{req-id} traceId: %X{X-B3-TraceId}, spanId: %X{X-B3-SpanId}, parent: %X{X-B3-ParentSpanId:-}] [error_level:%errorLevel] [error_type: %errorType] ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %jsonMsg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- sls properties -->
    <springProperty scope="context" name="sls.endpoint" source="sls.endpoint:"/>
    <springProperty scope="context" name="sls.access-key-id" source="sls.access-key-id:"/>
    <springProperty scope="context" name="sls.access-key-secret" source="sls.access-key-secret:"/>
    <springProperty scope="context" name="sls.project" source="sls.project:"/>
    <springProperty scope="context" name="sls.log-store" source="sls.log-store:"/>
    <springProperty scope="context" name="sls.topic" source="sls.topic:"/>
    <springProperty scope="context" name="sls.level" source="sls.level:"/>

    <!-- 为了防止进程退出时，内存中的数据丢失，请加上此选项 -->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>
    <!-- 可用来获取 StatusManager 中的状态 -->
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener"/>
    <!-- 解决 DEBUG 模式下循环发送的问题 -->
    <logger name="org.apache.http.impl.conn.Wire" level="WARN"/>

    <!-- 阿里云日志服务 -->
    <appender name="aliyun" class="com.aliyun.openservices.log.logback.LoghubAppender">
        <!-- 内网 | 外网 -->
        <endpoint>${sls.endpoint}</endpoint>
        <accessKeyId>${sls.access-key-id}</accessKeyId>
        <accessKeySecret>${sls.access-key-secret}</accessKeySecret>

        <project>${sls.project}</project>
        <logStore>${sls.log-store}</logStore>

        <!-- 可选项: 主题 | 允许的ip-->
        <topic>${sls.topic}</topic>
        <!--<source>your source</source>-->

        <!-- 单个 producer 实例能缓存的日志大小上限，默认为 100MB -->
        <totalSizeInBytes>52428800</totalSizeInBytes>
        <!-- 如果 producer 可用空间不足，调用者在 send 方法上的最大阻塞时间，默认为 60 秒。为了不阻塞打印日志的线程，强烈建议将该值设置成 0 -->
        <maxBlockMs>0</maxBlockMs>
        <!-- 执行日志发送任务的线程池大小，默认为可用处理器个数 -->
        <ioThreadCount>8</ioThreadCount>
        <!-- 当一个 ProducerBatch 中缓存的日志大小大于等于 batchSizeThresholdInBytes 时，该 batch 将被发送，默认为 512 KB，最大可设置成 5MB -->
        <batchSizeThresholdInBytes>262144</batchSizeThresholdInBytes>
        <!-- 当一个 ProducerBatch 中缓存的日志条数大于等于 batchCountThreshold 时，该 batch 将被发送，默认为 4096，最大可设置成 40960 -->
        <batchCountThreshold>2048</batchCountThreshold>
        <!-- 一个 ProducerBatch 从创建到可发送的逗留时间，默认为 2 秒，最小可设置成 100 毫秒 -->
        <lingerMs>200</lingerMs>
        <!-- 如果某个 ProducerBatch 首次发送失败，能够对其重试的次数，默认为 10 次 -->
        <!-- 如果 retries 小于等于 0，该 ProducerBatch 首次发送失败后将直接进入失败队列 -->
        <retries>10</retries>
        <!-- 首次重试的退避时间，默认为 100 毫秒 -->
        <!-- Producer 采样指数退避算法，第 N 次重试的计划等待时间为 baseRetryBackoffMs * 2^(N-1) -->
        <baseRetryBackoffMs>100</baseRetryBackoffMs>
        <!-- 重试的最大退避时间，默认为 50 秒 -->
        <maxRetryBackoffMs>50000</maxRetryBackoffMs>

        <!-- 可选项 通过配置 encoder 的 pattern 自定义 log 的格式 -->
        <encoder>
            <pattern>${file.pattern}</pattern>
        </encoder>

        <!-- 临界值过滤器 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${sls.level}</level>
        </filter>

        <!-- 可选项 设置 time 字段呈现的格式 -->
        <timeFormat>yyyy-MM-dd HH:mm:ss.SSS</timeFormat>
        <!-- 可选项 设置 time 字段呈现的时区 -->
        <timeZone>Asia/Shanghai</timeZone>
    </appender>
    <appender name="de-aliyun" class="common.logging.desensitize.v2.appender.DeLoghubAppender">
        <!-- 内网 | 外网 -->
        <endpoint>${sls.endpoint}</endpoint>
        <accessKeyId>${sls.access-key-id}</accessKeyId>
        <accessKeySecret>${sls.access-key-secret}</accessKeySecret>

        <project>${sls.project}</project>
        <logStore>${sls.log-store}</logStore>

        <!-- 可选项: 主题 | 允许的ip-->
        <topic>${sls.topic}</topic>
        <!--<source>your source</source>-->

        <!-- 单个 producer 实例能缓存的日志大小上限，默认为 100MB -->
        <totalSizeInBytes>52428800</totalSizeInBytes>
        <!-- 如果 producer 可用空间不足，调用者在 send 方法上的最大阻塞时间，默认为 60 秒。为了不阻塞打印日志的线程，强烈建议将该值设置成 0 -->
        <maxBlockMs>0</maxBlockMs>
        <!-- 执行日志发送任务的线程池大小，默认为可用处理器个数 -->
        <ioThreadCount>8</ioThreadCount>
        <!-- 当一个 ProducerBatch 中缓存的日志大小大于等于 batchSizeThresholdInBytes 时，该 batch 将被发送，默认为 512 KB，最大可设置成 5MB -->
        <batchSizeThresholdInBytes>262144</batchSizeThresholdInBytes>
        <!-- 当一个 ProducerBatch 中缓存的日志条数大于等于 batchCountThreshold 时，该 batch 将被发送，默认为 4096，最大可设置成 40960 -->
        <batchCountThreshold>2048</batchCountThreshold>
        <!-- 一个 ProducerBatch 从创建到可发送的逗留时间，默认为 2 秒，最小可设置成 100 毫秒 -->
        <lingerMs>200</lingerMs>
        <!-- 如果某个 ProducerBatch 首次发送失败，能够对其重试的次数，默认为 10 次 -->
        <!-- 如果 retries 小于等于 0，该 ProducerBatch 首次发送失败后将直接进入失败队列 -->
        <retries>10</retries>
        <!-- 首次重试的退避时间，默认为 100 毫秒 -->
        <!-- Producer 采样指数退避算法，第 N 次重试的计划等待时间为 baseRetryBackoffMs * 2^(N-1) -->
        <baseRetryBackoffMs>100</baseRetryBackoffMs>
        <!-- 重试的最大退避时间，默认为 50 秒 -->
        <maxRetryBackoffMs>50000</maxRetryBackoffMs>

        <!-- 可选项 通过配置 encoder 的 pattern 自定义 log 的格式 -->
        <encoder>
            <pattern>${file.pattern}</pattern>
        </encoder>

        <!-- 临界值过滤器 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${sls.level}</level>
        </filter>

        <!-- 可选项 设置 time 字段呈现的格式 -->
        <timeFormat>yyyy-MM-dd HH:mm:ss.SSS</timeFormat>
        <!-- 可选项 设置 time 字段呈现的时区 -->
        <timeZone>Asia/Shanghai</timeZone>
    </appender>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${console.pattern}</pattern>
        </encoder>
    </appender>
    <appender name="de-console" class="common.logging.desensitize.v2.appender.DeConsoleAppender">
        <encoder>
            <pattern>${console.pattern}</pattern>
        </encoder>
    </appender>

    <!-- Log file debug output -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/debug.log</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${file.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="de-debug" class="common.logging.desensitize.v2.appender.DeRollingFileAppender">
        <file>${log.path}/de-debug.log</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/de-debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${file.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- Log file error output -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!--  时间滚动
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/com-tims-tcms-info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        -->
        <encoder>
            <pattern>${file.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="de-error" class="common.logging.desensitize.v2.appender.DeRollingFileAppender">
        <file>${log.path}/de-error.log</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/%d{yyyy-MM}/de-error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!--  时间滚动
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/com-tims-tcms-info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        -->
        <encoder>
            <pattern>${file.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <logger name="io.netty" level="ERROR"/>
    <logger name="reactor.netty" level="ERROR"/>
    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.jmx" level="WARN"/>
</included>